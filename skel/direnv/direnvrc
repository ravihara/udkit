direnv_version 2.35.0

## Handle python version (using uv)
layout_pyuv() {
  local udk_version=$1
  local udk_basedir=${HOME}/.udkit/dist

  if [ -z "$udk_version" ]; then
    echo "No python version specified."
    return
  fi

  if [ -z "$(command -v uv 2>/dev/null)" ]; then
    echo "Unable to find 'uv' command. Please check the installation or PATH"
    return
  fi

  local prog_dir="$udk_basedir/py-$udk_version"

  if [ ! -d "$prog_dir" ]; then
    echo "No python version $udk_version found. Please check the installation."
    return
  fi

  load_prefix $prog_dir

  # Fix: Unbound variable issue
  VIRTUAL_ENV=""

  if [[ -d ".venv" ]]; then
    VIRTUAL_ENV="$(pwd)/.venv"
  fi

  if [[ -z $VIRTUAL_ENV || ! -d $VIRTUAL_ENV ]]; then
    if [[ ! -f "pyproject.toml" ]]; then
      echo "No uv project exists. Executing \`uv init\` to create one."
      uv init --bare --no-readme --no-workspace
    fi

    uv venv --python ${udk_version}
    VIRTUAL_ENV="$(pwd)/.venv"
  fi

  PATH_add "$VIRTUAL_ENV/bin"
  export UV_ACTIVE=1 # or VENV_ACTIVE=1
  export VIRTUAL_ENV
}

## Handle nodejs version
use_nodejs() {
  local udk_version=$1
  local udk_basedir=${HOME}/.udkit/dist

  if [ -z "$udk_version" ]; then
    echo "No nodejs version specified."
    return
  fi

  local prog_dir="$udk_basedir/node-$udk_version"
  local sys_prog="$(which npm 2>/dev/null)"

  if [ -d "$prog_dir" ]; then
    load_prefix $prog_dir
    layout node
  elif [ -n "$sys_prog" ]; then
    layout node
  fi
}

## Handle golang version
use_golang() {
  local udk_version=$1
  local udk_basedir=${HOME}/.udkit/dist

  if [ -z "$udk_version" ]; then
    echo "No golang version specified."
    return
  fi

  local prog_dir="$udk_basedir/go-$udk_version"
  local sys_prog="$(which go 2>/dev/null)"

  if [ -d "$prog_dir" ]; then
    load_prefix $prog_dir
    export GOROOT=$prog_dir
    export GOPATH=${udk_basedir}/goext
  elif [ -n "$sys_prog" ]; then
    export GOROOT=$(dirname $(dirname $syslog))
    export GOPATH=${udk_basedir}/goext
  fi
}

## Handle openjdk version
use_openjdk() {
  local udk_version=$1
  local udk_basedir=${HOME}/.udkit/dist

  if [ -z "$udk_version" ]; then
    echo "No openjdk version specified."
    return
  fi

  local prog_dir="$udk_basedir/jdk-$udk_version"
  local sys_jvm="$(test -e /etc/alternatives/java && ls -l /etc/alternatives/java | awk {'print $11'} | sed -e 's|/bin/java||' 2>/dev/null)"

  if [ -d "$prog_dir" ]; then
    load_prefix $prog_dir
    unset JAVA_VERSION
    export JAVA_HOME=$prog_dir
  elif [ -n "$sys_jvm" ]; then
    load_prefix $sys_jvm
    unset JAVA_VERSION
    export JAVA_HOME=$sys_jvm
  fi
}

## Handle gradle version
use_gradle() {
  local udk_version=$1
  local udk_basedir=${HOME}/.udkit/dist

  if [ -z "$udk_version" ]; then
    echo "No gradle version specified."
    return
  fi

  local prog_dir="$udk_basedir/gradle-$udk_version"
  local sys_prog="$(which gradle 2>/dev/null)"

  if [ -d "$prog_dir" ]; then
    load_prefix $prog_dir
    export GRADLE_HOME=$prog_dir
  elif [ -n "$sys_prog" ]; then
    export GRADLE_HOME=$(dirname $(dirname $sys_prog))
  fi
}

## Handle maven version
use_maven() {
  local udk_version=$1
  local udk_basedir=${HOME}/.udkit/dist

  if [ -z "$udk_version" ]; then
    echo "No maven version specified."
    return
  fi

  local prog_dir="$udk_basedir/mvn-$udk_version"
  local sys_prog="$(which mvn 2>/dev/null)"

  if [ -d "$prog_dir" ]; then
    load_prefix $prog_dir
    export M2_HOME=$prog_dir
  elif [ -n "$sys_prog" ]; then
    export M2_HOME=$(dirname $(dirname $sys_prog))
  fi
}
