#!/bin/bash -e

export IFS=$(echo -en '\n\b')

usage_help="Usage: $(basename $0) <ssca-command> <ssca-config-file>"
cmds_help="Commands: gen-rootca | gen-server-cert | gen-client-cert | cleanup-ca"

## Check for required commandline arguments
if [ $# -ne 2 ]; then
    echo -e $usage_help
    echo -e $cmds_help
    exit 1
fi

CMD=$1
CONFIG_FILE=$2

JAVA_KEYTOOL=$(command -v keytool 2>/dev/null)

## Check for the existance of configuration file
if [ ! -f "$CONFIG_FILE" ]; then
    echo -e "Specified configuration file '$CONFIG_FILE' does not exist!!"
    exit 1
fi

## Mandatory configuration attributes
req_config_params=(
    ROOTCA_PASS
    CA_BASE
    CA_COUNTRY
    CA_STATE
    CA_LOCATION
    CA_ORGANIZATION
    CA_ORG_UNIT
    CA_COMMON_NAME
    CA_EMAIL_ADDRESS
    CA_VALID_DAYS
    CA_CERT_PASS
    CA_CERT_FQDN
    CA_CERT_SAN
    CA_CERT_VALID_DAYS
)

## Load the configuration
source "$CONFIG_FILE"

for param in "${req_config_params[@]}"; do
    [[ -z "${!param}" ]] && echo -e "Required configuration parameter '$param' is missing" && exit 1
    export $param
done

if [ ! $(echo $CA_CERT_FQDN | grep -P '(?=^.{1,254}$)(^(?>(?!\d+\.)[a-zA-Z0-9_\-]{1,63}\.?)+(?:[a-zA-Z]{2,})$)') ]; then
    echo -e "CA Certificate common-name should be a Fully Qualified Domain Name (FQDN)"
    exit 1
fi

## Enter the setup base folder
script_base=$(udk-get-self-dir $0)
ssca_name="$(echo "$CA_COMMON_NAME" | tr '[:upper:]' '[:lower:]' | sed -e 's| \+|-|g')"

## Setup the SSCA base folder
export SSCA_BASE="${CA_BASE}/${ssca_name}"
mkdir -p ${SSCA_BASE} && sync

## Common / global variables
rootca_cert="rootca-cert.pem"
rootca_key="rootca-key.pem"

function gen_rootca() {
    echo -e "${TRML_HL}Entering SSCA setup folder (${SSCA_BASE})...${TRML_NC}"
    pushd $SSCA_BASE >/dev/null

    ## Check for previous dist folder
    if [ -f "ssl/certs/${rootca_cert}" ]; then
        mesg="${TRML_HL}'${rootca_cert}'${TRML_NC}"

        echo -e "Root CA certificate $mesg already exists in $(pwd)/ssl/certs folder! Will not create it again."
        popd >/dev/null

        exit 0
    fi

    ## Setup rootca folder structure
    echo -e "${TRML_HL}Setting up SSCA folder structure...${TRML_NC}"

    mkdir -p ssl/{certs,crl,csr,newcerts,private}
    chmod 700 ssl/private

    touch ssl/index.txt
    echo 1000 >ssl/serial
    echo 1000 >ssl/crlnumber

    cp -a ${script_base}/../skel/ssca/openssl_rootca.cnf openssl_rootca.cnf && sync
    cp -a ${script_base}/../skel/ssca/openssl_fqdn.cnf openssl_fqdn.cnf && sync
    chmod 644 *.cnf

    ## Create the rootca certificate
    echo -e "${TRML_HL}Creating rootca certificate and key pair...${TRML_NC}"
    openssl req -new -x509 -sha256 \
        -config openssl_rootca.cnf \
        -passin pass:$ROOTCA_PASS \
        -passout pass:$ROOTCA_PASS \
        -subj "/CN=${CA_COMMON_NAME}" \
        -days ${CA_VALID_DAYS} \
        -extensions v3_ca \
        -keyout ssl/private/${rootca_key} \
        -out ssl/certs/${rootca_cert} >/dev/null

    chmod 400 ssl/private/${rootca_key}
    chmod 444 ssl/certs/${rootca_cert}

    ## Verify the rootca certificate
    echo -e "${TRML_HL}Verifying rootca certificate...${TRML_NC}"
    openssl x509 -noout -text -passin pass:$ROOTCA_PASS -in ssl/certs/${rootca_cert} >/dev/null

    ## Create base64 encoded rootca certificate
    echo -e "${TRML_HL}Creating rootca base64 file...${TRML_NC}"
    openssl x509 -in ssl/certs/${rootca_cert} -outform der | base64 -w0 >ssl/certs/rootca-cert.der && sync
    chmod 444 ssl/certs/rootca-cert.der

    ## Create certificate chain trust-store (JKS)
    if [ -n "$JAVA_KEYTOOL" ]; then
        echo -e "${TRML_HL}Creating rootca trust-store file...${TRML_NC}"

        keytool -importcert \
            -noprompt \
            -trustcacerts \
            -keystore ssl/certs/rootca-cert.jks \
            -storepass $ROOTCA_PASS \
            -alias "ssca-rootca" \
            -file ssl/certs/${rootca_cert} && sync

        chmod 444 ssl/certs/rootca-cert.jks
    fi

    ## Exit the ssca folder
    popd >/dev/null

    echo -e "${TRML_HL}All Done.${TRML_NC}"
}

function gen_machine_certificate() {
    local cert_type=${1:-"server"}

    ## Check for valid certificate type
    if [ "$cert_type" != "server" ] && [ "$cert_type" != "client" ]; then
        echo -e "Certificate type '$cert_type' is not supported! It should be 'server' or 'client'."
        exit 1
    fi

    if [ "$cert_type" == "server" ]; then
        local cert_server="$(echo $CA_CERT_FQDN | sed -e 's/\./-/g')"
        local cert_subj="/C=${CA_COUNTRY}/ST=${CA_STATE}/L=${CA_LOCATION}/O=${CA_ORGANIZATION}/OU=${CA_ORG_UNIT}/CN=${CA_CERT_FQDN}"
        local cert_name="${cert_server}-${cert_type}-cert"
        local csr_name="${cert_server}-${cert_type}-csr"
        local key_name="${cert_server}-${cert_type}-key"
    else
        local cert_client="$(hostnamectl --static)"
        local cert_subj="/CN=${cert_client}"
        local cert_name="${cert_client}-${cert_type}-cert"
        local csr_name="${cert_client}-${cert_type}-csr"
        local key_name="${cert_client}-${cert_type}-key"
    fi

    echo -e "Entering SSCA setup folder (${SSCA_BASE})..."
    pushd $SSCA_BASE >/dev/null

    ## Check for existance of certificate file
    if [ -f "ssl/certs/${cert_name}.pem" ]; then
        mesg="${TRML_HL}'${cert_name}.pem'${TRML_NC}"

        echo -e "Server certificate $mesg already exists in $(pwd)/ssl/certs folder! Will not create it again."
        popd >/dev/null
        exit 0
    fi

    ## Check for previous rootca folder
    if [ ! -f "ssl/certs/${rootca_cert}" ]; then
        mesg="${TRML_HL}'${rootca_cert}'${TRML_NC}"

        echo -e "Root CA certificate $mesg does not exist in $(pwd)/ssl/certs folder! Cannot create $cert_type certificate."
        popd >/dev/null
        exit 1
    fi

    ## Check extension type based onf certificate type
    if [ "$cert_type" == "server" ]; then
        extn_type="server_cert"
    else
        extn_type="usr_cert"
    fi

    echo -e "Using extension type: ${TRML_HL}'${extn_type}'${TRML_NC}"

    echo -e "Creating csr and key pair for ${TRML_HL}${CA_CERT_FQDN}...${TRML_NC}"
    openssl req -new -sha256 \
        -config openssl_fqdn.cnf \
        -passin pass:$CA_CERT_PASS \
        -passout pass:$CA_CERT_PASS \
        -extensions ${extn_type} \
        -subj "${cert_subj}" \
        -keyout ssl/private/${key_name}.pem \
        -out ssl/csr/${csr_name}.pem >/dev/null

    chmod 400 ssl/private/${key_name}.pem

    echo -e "Creating rootca self-signed certificate for ${TRML_HL}${CA_CERT_FQDN}...${TRML_NC}"
    openssl ca -notext -batch \
        -config openssl_fqdn.cnf \
        -extensions ${extn_type} \
        -days ${CA_CERT_VALID_DAYS} \
        -md sha256 \
        -passin pass:$ROOTCA_PASS \
        -in ssl/csr/${csr_name}.pem \
        -out ssl/certs/${cert_name}.pem >/dev/null

    chmod 444 ssl/certs/${cert_name}.pem

    echo -e "${TRML_HL}Verifying certificate...${TRML_NC}"
    openssl x509 -noout -text -passin pass:$CA_CERT_PASS -in ssl/certs/${cert_name}.pem >/dev/null

    echo -e "${TRML_HL}Validating certificate against rootca...${TRML_NC}"
    is_cert_ok="$(openssl verify -CAfile ssl/certs/${rootca_cert} ssl/certs/${cert_name}.pem | grep -E -i "${cert_name}.pem: OK" | grep -v "grep")"

    if [ -z "$is_cert_ok" ]; then
        echo -e "Something wrong happened while creating certificate for ${CA_CERT_FQDN}!"
        popd >/dev/null ## Exit from setup base folder

        exit 1
    fi

    echo -e "${TRML_HL}Creating certificate in pkcs12 format...${TRML_NC}"
    cat ssl/certs/${cert_name}.pem ssl/private/${key_name}.pem >ssl/certs/${cert_name}-with-key.pem
    openssl pkcs12 -export \
        -passin pass:$CA_CERT_PASS \
        -passout pass:$CA_CERT_PASS \
        -in ssl/certs/${cert_name}-with-key.pem \
        -out ssl/certs/${cert_name}.pkcs12

    if [ -n "$JAVA_KEYTOOL" ]; then
        echo -e "${TRML_HL}Creating Java KeyStore File...${TRML_NC}"
        keytool -importkeystore \
            -noprompt \
            -srcstoretype pkcs12 \
            -srcalias "1" \
            -srckeystore ssl/certs/${cert_name}.pkcs12 \
            -srcstorepass $CA_CERT_PASS \
            -destkeystore ssl/certs/${cert_name}.jks \
            -deststoretype pkcs12 \
            -destalias "${CA_CERT_FQDN}" \
            -deststorepass $CA_CERT_PASS && sync

        echo -e "${TRML_HL}Adding rootca certificates to Java KeyStore File...${TRML_NC}"
        keytool -importcert \
            -noprompt \
            -trustcacerts \
            -keystore ssl/certs/${cert_name}.jks \
            -storepass $CA_CERT_PASS \
            -alias "${cert_type}-rootca" \
            -file ssl/certs/${rootca_cert} && sync
    fi

    rm -f ssl/certs/${cert_name}-with-key.pem

    ## Exit the setup base folder
    popd >/dev/null

    echo -e "${TRML_HL}All Done.${TRML_NC}"
}

function cleanup_ca() {
    [[ -d ${SSCA_BASE} ]] && rm -rf ${SSCA_BASE} && echo -e "${TRML_HL}Cleanup complete.${TRML_NC}"
}

case "$CMD" in
gen-rootca)
    gen_rootca
    ;;
gen-server-cert)
    gen_machine_certificate "server"
    ;;
gen-client-cert)
    gen_machine_certificate "client"
    ;;
cleanup-ca)
    cleanup_ca
    ;;
*)
    echo -e $usage_help
    echo -e $cmds_help
    exit 1
    ;;
esac

exit 0
